<?php

class Database
{
    // Singleton object, leave $me alone.
    private static $me;
    private $db;
    private $dbType;

    /**
     * Constructor of Database
     *
     * @param mixed $type
     * @return Database
     */
    public function __construct($type = "mysql")  {
        global $config;

        if ($this->isSupported($type) == true) {
            $this->$dbType = $type;
        } else {
            die("Database type is not supported yet.");
        }

        try {
            $this->db = new PDO($this->getConnectionString($this->$dbType), $config['db_user'], $config['db_password']);
            $this->db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

        } catch (PDOException $ex) {
            Config::notify("Database error", $ex->getMessage());
        }
    }

    /**
     * Get type of database supported: mysql|sqlite|oracle|mssql
     *
     * @return mixed|string
     */
    public function getDbType()
    {
        return $this->$dbType;
    }

    /**
     * Check if is supported database type
     *
     * @param mixed $type
     * @return bool
     */
    private function isSupported($type)
    {
        if ($type == "mysql" || $type == "sqlite" || $type == "oracle" || $type == "mssql") {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Get Connection Strings
     *
     * @param mixed $type
     * @return string
     */
    public function getConnectionString($type = "mysql")
    {
        global $config;
        return $type . ":dbname=" . $config['db_name'] . ";host=" . $config['db_host'];
    }

    /**
     * Get singleton object instance
     *
     * @return Database
     *
     */
    public static function getInstance() {
        if (is_null(self::$me)) {
            self::$me = new Database();
        }

        return self::$me;
    }

    /**
     * Get query statement ready for execute
     *
     * @param mixed $sql
     * @param mixed $params
     * @return mixed
     */
    public function statement($sql, $params = null) {
        try {
            if (isset($sql) == false) {
                die("SQL parameter can't be null or empty.");
            }

            // safe sql if not passed parameters
            if (isset($params)) {
                $sql = $this->db->quote($sql);
            }

            // creating the statement
            $stmt = null;
            $stmt = $this->db->query($sql);

            //var_dump($this->db);

            if (isset($params) && is_array($params)) {
                foreach ($params as $key => $value) {
                    $stmt->bindParam(":$key", $value);
                }
            }

            return $stmt;

        } catch (Exception $ex) {
            Config::notify("Database error", $ex->getMessage());
        }

        return null;
    }

    /**
     * Get query
     *
     * @param mixed $sql
     * @param mixed $params
     * @return mixed
     */
    public function query($sql, $params = null) {
        $stmt = $this->statement($sql, $params);

        if ($stmt) {
            $stmt->setFetchMode(PDO::FETCH_OBJ); // setting the fetch mode           
            return $stmt->fetchAll();

        } else {
            die("Function parameter sql is needed for continue");
        }
    }

    /**
     * Get scalar value
     *
     * @param mixed $sql
     * @param mixed $params
     * @return mixed
     */
    public function getValue($sql, $params = null) {
        $result = $this->getValues($sql, $params);
        return $result[0];
    }

    /**
     * Get values of first column
     *
     * @param mixed $sql
     * @param mixed $params
     * @return mixed
     */
    public function getValues($sql, $params = null) {
        $stmt = $this->statement($sql, $params);

        if ($stmt) {
            $stmt->setFetchMode(PDO::FETCH_COLUMN); // setting the fetch mode
            return $stmt->fetchAll();

        } else {
            die("Function parameter sql is needed for continue");
        }
    }

    /**
     * Get row values in array
     *
     * @param mixed $sql
     * @param mixed $params
     * @return mixed
     */
    public function getRow($sql, $params = null) {
        $result = $this->query($sql, $params);

        if (count($result) == 0) {
            return null;
        }

        return $result[0];
    }

    /**
     * Execute sql in database (no return)
     *
     * @param mixed $sql
     * @param mixed $params
     * @return int
     */
    public function execute($sql, $params = null) {
        $stmt = $this->statement($sql, $params);

        if ($stmt) {
            if ($stmt->execute() == true) { // execute the statement
                return $stmt->rowCount();
            } else {
                return 0;
            }

        } else {
            die("Function parameter sql is needed for continue");
        }
    }

    /**
     * Get data representation in JSON
     *
     * @param mixed $sql
     * @param mixed $params
     * @return string
     */
    public function getJSON($sql, $params = null) {
        return json_encode((array)$this->query($sql, $params), true);
    }

}

